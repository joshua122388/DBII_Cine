/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package presentacion;

import accesoDatos.ConexionSQL;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import entidades.*;
import entidades.Sesion;
import javax.swing.JDialog;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfWriter;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;
import java.text.SimpleDateFormat;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionListener;



/**
 *
 * @author contr
 */
public class CompraTiquetes extends javax.swing.JFrame {

    private java.util.List<Integer> listaIdFunciones = new ArrayList<>();
    private int idFuncionSeleccionado = -1;
    int idCliente = Sesion.idClienteActual;
    private java.util.List<String> listaSnacks = new ArrayList<>();
    private double totalSnacks = 0.0;
    private java.util.List<String> productosSeleccionados = new ArrayList<>();


    /**
     * Creates new form CompraTiquetes
     */
    public CompraTiquetes() {
        System.out.println("ID del cliente actual: " + idCliente);
        initComponents();
        cargarFuncionesPorDefecto();
        cargarFunciones();
        
        tblfunciones.getSelectionModel().addListSelectionListener(e -> {
    if (!e.getValueIsAdjusting()) {
        int fila = tblfunciones.getSelectedRow();

        if (fila != -1) {
            try {
                idFuncionSeleccionado = Integer.parseInt(tblfunciones.getValueAt(fila, 0).toString());
                String titulo = tblfunciones.getValueAt(fila, 3).toString();
                String fecha = tblfunciones.getValueAt(fila, 1).toString();

                txtPelicula.setText(titulo);
                txtFechaFuncion.setText(fecha);

                JOptionPane.showMessageDialog(this, "Función seleccionada: " + titulo + " - " + fecha);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error al seleccionar función: " + ex.getMessage());
            }
        }
    }
});

        
        cargarSnacks();
        
        // Bloquear edición de campos de texto
            txtPelicula.setEditable(false);
            txtFechaFuncion.setEditable(false);
            txtCantidadTiquetes.setEditable(false);
            txtNombreSnack.setEditable(false);
            txtCantidadProductos.setEditable(false);
            txtAsientos.setEditable(false);
            txtTotal.setEditable(false);

        
        cmbFunciones.addActionListener(new ActionListener() {
    public void actionPerformed(ActionEvent evt) {
        String tituloSeleccionado = (String) cmbFunciones.getSelectedItem();
        if (tituloSeleccionado != null) {
            cargarFuncionesPorTitulo(tituloSeleccionado);
        }
    }
});

        
    spnCantidadTiquetes.addChangeListener(e -> {
    int cantidad = (int) spnCantidadTiquetes.getValue();
    int total = cantidad * 2500;
    lblTotal.setText("Total ₡" + total);
    lblTotal.setText("<html>Total ₡<span style='color:blue;'>" + total + "</span></html>");
    
    // txtFechaFuncion.setText(String.valueOf(cantidad));
    txtCantidadTiquetes.setText(String.valueOf(cantidad));
});

    }
    
    public javax.swing.JSpinner getSpnCantidadTiquetes() {
    return spnCantidadTiquetes;
        }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblfunciones = new javax.swing.JTable();
        btnSeleccion = new javax.swing.JButton();
        btnDescuento = new javax.swing.JButton();
        btnRegreso = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        spnCantidadTiquetes = new javax.swing.JSpinner();
        cmbFunciones = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCompra = new javax.swing.JTable();
        btnFacturar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAsientos = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtCantidadProductos = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtFechaFuncion = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtNombreSnack = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtCantidadTiquetes = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtPelicula = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Compra de Tiquetes");

        jPanel1.setBackground(new java.awt.Color(255, 153, 51));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabel1.setText("Compra de Tiquetes");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 40, -1, -1));

        tblfunciones.setBackground(new java.awt.Color(102, 255, 51));
        tblfunciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblfunciones);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 240, 780, 240));

        btnSeleccion.setBackground(new java.awt.Color(0, 153, 204));
        btnSeleccion.setText("Seleccionar Asiento");
        btnSeleccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionActionPerformed(evt);
            }
        });
        jPanel1.add(btnSeleccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 810, 160, 60));

        btnDescuento.setBackground(new java.awt.Color(51, 204, 0));
        btnDescuento.setText("Aplicar para descuento");
        btnDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDescuentoActionPerformed(evt);
            }
        });
        jPanel1.add(btnDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 810, 160, 60));

        btnRegreso.setBackground(new java.awt.Color(204, 204, 204));
        btnRegreso.setText("Menu Principal");
        btnRegreso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresoActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegreso, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 320, 160, 60));
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 160, -1, -1));

        lblTotal.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lblTotal.setText("Total:  ");
        jPanel1.add(lblTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 160, 30));

        jLabel4.setText("Cantidad Boletos");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 110, 120, 20));
        jPanel1.add(spnCantidadTiquetes, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, -1, -1));
        jPanel1.add(cmbFunciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 110, 270, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Peliculas");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 90, -1));

        jScrollPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        tblCompra.setBackground(new java.awt.Color(0, 153, 255));
        tblCompra.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblCompra);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 520, 620, 270));

        btnFacturar.setBackground(new java.awt.Color(204, 204, 0));
        btnFacturar.setText("Procesar Orden");
        btnFacturar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFacturarActionPerformed(evt);
            }
        });
        jPanel1.add(btnFacturar, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 800, 160, 60));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel6.setText("Snacks");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 480, 60, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel2.setText("Total");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 730, -1, 30));
        jPanel1.add(txtAsientos, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 690, 270, 40));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel7.setText("Asientos");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 690, -1, 30));
        jPanel1.add(txtCantidadProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 650, 270, 40));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel8.setText("Fecha de la funcion");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 530, -1, 30));
        jPanel1.add(txtFechaFuncion, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 530, 270, 40));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel9.setText("Nombre Producto");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 610, -1, 30));
        jPanel1.add(txtNombreSnack, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 610, 270, 40));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel10.setText("Cantidad de Tiquetes");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 575, -1, 30));
        jPanel1.add(txtCantidadTiquetes, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 570, 270, 40));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel11.setText("Cantidad de Productos");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 650, -1, 30));
        jPanel1.add(txtTotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 730, 270, 40));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel12.setText("Nombre de Pelicula");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 490, -1, 30));
        jPanel1.add(txtPelicula, new org.netbeans.lib.awtextra.AbsoluteConstraints(850, 490, 270, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 923, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setAsientosSeleccionados(String asientos) {
    txtAsientos.setText(asientos);
}

    
    
private void cargarFunciones() {
DefaultTableModel model = new DefaultTableModel(
    new Object[]{"ID", "Fecha", "Hora de inicio", "Título", "Género", "Clasificación", "Sala"}, 0) {
    @Override
    public boolean isCellEditable(int row, int column) {
        return column == 8;
    }
};


    try (Connection conn = ConexionSQL.conectar()) {
        String query = "SELECT f.ID_Funcion, f.Fecha, f.Hora_Inicio, p.Titulo, p.Genero, p.Clasificacion, f.Numero_Sala " +
                       "FROM Funcion f INNER JOIN Pelicula p ON f.ID_Pelicula = p.ID_Pelicula";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        cmbFunciones.removeAllItems();        // Limpiar combo
        listaIdFunciones.clear();             // Limpiar IDs
        ArrayList<String> titulosAgregados = new ArrayList<>();  // Evitar títulos duplicados en combo

        while (rs.next()) {
            // Agregar fila visible
            model.addRow(new Object[]{
                rs.getInt("ID_Funcion"), // columna 0 (oculta)
                rs.getString("Fecha"),
                new SimpleDateFormat("HH:mm").format(rs.getTime("Hora_Inicio")),
                rs.getString("Titulo"),
                rs.getString("Genero"),
                rs.getString("Clasificacion"),
                rs.getString("Numero_Sala"),
                "Seleccionar"
            });

            tblfunciones.getColumnModel().getColumn(0).setMinWidth(0);
            tblfunciones.getColumnModel().getColumn(0).setMaxWidth(0);
            tblfunciones.getColumnModel().getColumn(0).setWidth(0);

            // Guardar ID_Funcion en lista oculta
            listaIdFunciones.add(rs.getInt("ID_Funcion"));

            // Cargar títulos únicos al combo
            String titulo = rs.getString("Titulo");
            if (!titulosAgregados.contains(titulo)) {
                cmbFunciones.addItem(titulo);
                titulosAgregados.add(titulo);
            }
        }

        tblfunciones.setModel(model);
        //agregarBotonSeleccion();

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar funciones: " + e.getMessage());
    }
}




private void cargarFuncionesPorDefecto() {
DefaultTableModel model = new DefaultTableModel(
    new Object[]{"ID", "Fecha", "Hora de inicio", "Título", "Género", "Clasificación", "Sala"}, 0) {

        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 8; // Solo la columna del botón "Seleccionar"
        }
    };

    try (Connection conn = ConexionSQL.conectar()) {
        String query = "SELECT f.ID_Funcion, f.Fecha, f.Hora_Inicio, p.Titulo, p.Genero, p.Clasificacion, f.Numero_Sala " +
                       "FROM Funcion f " +
                       "INNER JOIN Pelicula p ON f.ID_Pelicula = p.ID_Pelicula";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("ID_Funcion"), // ID oculto
                rs.getString("Fecha"),
                new java.text.SimpleDateFormat("HH:mm").format(rs.getTime("Hora_Inicio")),
                rs.getString("Titulo"),
                rs.getString("Genero"),
                rs.getString("Clasificacion"),
                rs.getString("Numero_Sala"),
            });
        }

        tblfunciones.setModel(model);
        //agregarBotonSeleccion();

        // Ocultar columna ID visualmente
        tblfunciones.getColumnModel().getColumn(0).setMinWidth(0);
        tblfunciones.getColumnModel().getColumn(0).setMaxWidth(0);
        tblfunciones.getColumnModel().getColumn(0).setWidth(0);

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar funciones: " + e.getMessage());
    }
}



private void agregarBotonSeleccion() {
    tblfunciones.getColumn("Seleccion").setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            JButton btn = new JButton("Seleccionar");
            return btn;
        }
    });

    tblfunciones.getColumn("Seleccion").setCellEditor(new DefaultCellEditor(new JCheckBox()) {
        private final JButton btn = new JButton("Seleccionar");

        {
            btn.addActionListener(e -> {
                int row = tblfunciones.getSelectedRow();

                if (row < 0 || row >= tblfunciones.getRowCount()) {
                    JOptionPane.showMessageDialog(CompraTiquetes.this, "Error: índice de función no válido.");
                    return;
                }

                int cantidadTiquetes = (int) spnCantidadTiquetes.getValue();
                if (cantidadTiquetes <= 0) {
                    JOptionPane.showMessageDialog(CompraTiquetes.this, "Debe de seleccionar al menos un tiquete.");
                    return;
                }

                // ID función
                idFuncionSeleccionado = Integer.parseInt(tblfunciones.getValueAt(row, 0).toString());
                // Título y fecha
                String titulo = tblfunciones.getValueAt(row, 3).toString();
                String fecha = tblfunciones.getValueAt(row, 1).toString();

                // Mostrar en campos
                txtPelicula.setText(titulo);
                txtFechaFuncion.setText(fecha);

                JOptionPane.showMessageDialog(CompraTiquetes.this, "Función seleccionada: " + titulo + " - " + fecha);
            });
        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                                                     boolean isSelected, int row, int column) {
            return btn;
        }
    });
}




private void cargarFuncionesPorTitulo(String titulo) {
    DefaultTableModel model = new DefaultTableModel(
        new Object[]{"ID", "Fecha", "Hora de inicio", "Título", "Género", "Clasificación", "Sala"}, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return false; // Ninguna columna editable
        }
    };

    try (Connection conn = ConexionSQL.conectar()) {
        String query = "SELECT f.ID_Funcion, f.Fecha, f.Hora_Inicio, p.Titulo, p.Genero, p.Clasificacion, f.Numero_Sala " +
                       "FROM Funcion f " +
                       "INNER JOIN Pelicula p ON f.ID_Pelicula = p.ID_Pelicula " +
                       "WHERE p.Titulo = ?";
        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setString(1, titulo);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getInt("ID_Funcion"),
                rs.getString("Fecha"),
                new java.text.SimpleDateFormat("HH:mm").format(rs.getTime("Hora_Inicio")),
                rs.getString("Titulo"),
                rs.getString("Genero"),
                rs.getString("Clasificacion"),
                rs.getString("Numero_Sala")
            });
        }

        tblfunciones.setModel(model);



        rs.close();
        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar funciones por título: " + e.getMessage());
    }
}






 private int obtenerIdFuncionSeleccionada() {
    int index = cmbFunciones.getSelectedIndex(); 
    return listaIdFunciones.get(index);
         }

    
    private void btnSeleccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionActionPerformed
    int cantidadTiquetes = (int) spnCantidadTiquetes.getValue();
    int filaSeleccionada = tblfunciones.getSelectedRow();


    if (cantidadTiquetes <= 0) {
        JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un tiquete.");
        return;
    }

    if (filaSeleccionada == -1) {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una función de la tabla.");
        return;
    }


    Asientos asiento = new Asientos(cantidadTiquetes, idFuncionSeleccionado, this);
    asiento.setAlwaysOnTop(false);
    asiento.setVisible(true);
    }//GEN-LAST:event_btnSeleccionActionPerformed

private void generarFacturaPDF(int orden, String pelicula, String fechaFuncion, String fechaCompra,
                               int entradas, String snacks, int cantSnacks, String asientos, double total) {
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Guardar Factura");
    fileChooser.setSelectedFile(new java.io.File("Factura_CPR-" + orden + ".pdf"));

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        java.io.File fileToSave = fileChooser.getSelectedFile();

        try {
            Document doc = new Document();
            PdfWriter.getInstance(doc, new FileOutputStream(fileToSave));
            doc.open();

            doc.add(new Paragraph("Orden de compra #: CPR-" + orden));
            doc.add(new Paragraph("\nDetalles de Compra:\n"));
            doc.add(new Paragraph("- Pelicula: " + pelicula));
            doc.add(new Paragraph("- Fecha de funcion: " + fechaFuncion));
            doc.add(new Paragraph("- Fecha de compra: " + fechaCompra));
            doc.add(new Paragraph("- Cantidad de entradas: " + entradas));
            doc.add(new Paragraph("- Snacks: " + snacks));
            doc.add(new Paragraph("- Cantidad de Snacks: " + cantSnacks));
            doc.add(new Paragraph("- Asientos: " + asientos));
            doc.add(new Paragraph("- Total: ₡" + total));

            doc.close();
            JOptionPane.showMessageDialog(this, "Factura guardada exitosamente en:\n" + fileToSave.getAbsolutePath());
            txtCantidadTiquetes.setText("");
            cargarFuncionesPorDefecto();
            
            
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error al generar la factura: " + ex.getMessage());
        }
    }
}


    
    private void btnFacturarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFacturarActionPerformed
    // Validación básica
    if (txtPelicula.getText().isEmpty() || txtFechaFuncion.getText().isEmpty()
            || txtCantidadTiquetes.getText().isEmpty() || txtNombreSnack.getText().isEmpty()
            || txtCantidadProductos.getText().isEmpty() || txtAsientos.getText().isEmpty()
            || txtTotal.getText().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor complete todos los campos antes de facturar.");
        return;
    }

    // Mostrar barra de progreso
    JDialog dialog = new JDialog(this, "Procesando orden", true);
    JProgressBar progressBar = new JProgressBar();
    progressBar.setIndeterminate(true);
    progressBar.setString("Procesando orden...");
    progressBar.setStringPainted(true);
    dialog.add(progressBar);
    dialog.setSize(300, 100);
    dialog.setLocationRelativeTo(this);

    // Mostrar diálogo en otro hilo
    new Thread(() -> dialog.setVisible(true)).start();

    // Ejecutar la lógica de facturación en segundo plano
    new SwingWorker<Void, Void>() {
        int ordenCompra = -1;

        @Override
        protected Void doInBackground() throws Exception {
            // Recolectar datos
            int idUsuario = Sesion.idClienteActual;
            int idFuncion = obtenerIdFuncionSeleccionada();
            int idPelicula = obtenerIDPeliculaDesdeFuncion(idFuncion);

            if (idPelicula == -1) {
                JOptionPane.showMessageDialog(null, "No se pudo encontrar el ID de la película. Revisa el nombre.");
                return null;
            }
            String nombrePelicula = txtPelicula.getText();
            String asientos = txtAsientos.getText();
            int cantidadTiquetes = Integer.parseInt(txtCantidadTiquetes.getText());
            String fechaFuncion = txtFechaFuncion.getText();
            String fechaCompra = java.time.LocalDate.now().toString();
            String nombreSnack = txtNombreSnack.getText();
            int cantidadArticulos = Integer.parseInt(txtCantidadProductos.getText());
            double total = Double.parseDouble(txtTotal.getText());

            // Insertar en la base de datos
            try (Connection conn = ConexionSQL.conectar()) {
                String sql = "INSERT INTO carrito (ID_USUARIO, ID_Pelicula, ID_Funcion, nombre_pelicula, asientos, cantidad_tiquetes, fecha_funcion, articulo_snack, cantidad_articulos, total) " +
                             "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                stmt.setInt(1, idUsuario);
                stmt.setInt(2, idPelicula);
                stmt.setInt(3, idFuncion);
                stmt.setString(4, nombrePelicula);
                stmt.setString(5, asientos);
                stmt.setInt(6, cantidadTiquetes);
                stmt.setDate(7, java.sql.Date.valueOf(fechaFuncion));
                stmt.setString(8, nombreSnack);
                stmt.setInt(9, cantidadArticulos);
                stmt.setDouble(10, total);

                stmt.executeUpdate();

                ResultSet generatedKeys = stmt.getGeneratedKeys();
                if (generatedKeys.next()) {
                    ordenCompra = generatedKeys.getInt(1);
                }

                stmt.close();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Error al insertar en carrito: " + ex.getMessage());
                ex.printStackTrace();
                return null;
            }

            // Generar PDF
            generarFacturaPDF(ordenCompra, nombrePelicula, fechaFuncion, fechaCompra,
                    cantidadTiquetes, nombreSnack, cantidadArticulos, asientos, total);

            return null;
        }

        @Override
        protected void done() {
            dialog.dispose();  // Cierra la barra de progreso

            // Limpiar campos
            txtPelicula.setText("");
            txtFechaFuncion.setText("");
            txtCantidadTiquetes.setText(""); 
            txtNombreSnack.setText("");
            txtCantidadProductos.setText("");
            txtAsientos.setText("");
            txtTotal.setText("");

            // Limpiar el spinner y evitar que actualice el campo txtCantidadTiquetes
            spnCantidadTiquetes.removeChangeListener(spnCantidadTiquetes.getChangeListeners()[0]); 
            spnCantidadTiquetes.setValue(0); 
            txtCantidadTiquetes.setText("");
            spnCantidadTiquetes.addChangeListener(e -> {
                int cantidad = (int) spnCantidadTiquetes.getValue();
                lblTotal.setText("<html>Total ₡<span style='color:blue;'>" + (cantidad * 2500) + "</span></html>");
                txtCantidadTiquetes.setText(String.valueOf(cantidad));
            });

            listaSnacks.clear();
            totalSnacks = 0.0;
        }

    }.execute();
    }//GEN-LAST:event_btnFacturarActionPerformed

private int obtenerDescuentoPorUsuario(int idUsuario) {
    int descuento = 0;
    try (Connection conn = ConexionSQL.conectar()) {
        String sql = "{call sp_ObtenerDescuentoPorUsuario(?, ?)}";
        CallableStatement stmt = conn.prepareCall(sql);
        stmt.setInt(1, idUsuario);
        stmt.registerOutParameter(2, java.sql.Types.INTEGER); // REGISTRA el parámetro de salida

        stmt.execute();

        descuento = stmt.getInt(2); // OBTIENE el valor del parámetro de salida

        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener descuento: " + e.getMessage());
    }
    return descuento;
}


    
    private void btnDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDescuentoActionPerformed
    int idUsuario = Sesion.idClienteActual;

    try (Connection conn = ConexionSQL.conectar()) {
        CallableStatement cs = conn.prepareCall("{CALL sp_ObtenerDescuentoPorUsuario(?, ?)}");
        cs.setInt(1, idUsuario); // ID del usuario
        cs.registerOutParameter(2, java.sql.Types.DECIMAL); // Salida: descuento (decimal)

        cs.execute();

        double descuento = cs.getDouble(2); // Valor entre 0.0 y 0.6

        if (descuento == 0.0) {
            JOptionPane.showMessageDialog(this, "Solo clientes con membresía pueden aplicar para descuento.");
            return;
        }

        double totalOriginal = Double.parseDouble(txtTotal.getText());

        // Aplicar descuento
        double totalConDescuento = totalOriginal - (totalOriginal * descuento);
        txtTotal.setText(String.format("%.2f", totalConDescuento));

        JOptionPane.showMessageDialog(this, "Descuento aplicado correctamente: " + (int)(descuento * 100) + "%");
        btnDescuento.setEnabled(false);

        cs.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener descuento: " + e.getMessage());
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, "El valor en el campo Total no es válido.");
    }
    }//GEN-LAST:event_btnDescuentoActionPerformed

    private void btnRegresoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresoActionPerformed
       MainMenu menu = new MainMenu();
       menu.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_btnRegresoActionPerformed

private void cargarSnacks() {
    DefaultTableModel model = new DefaultTableModel(new Object[]{"Nombre", "Precio", "Producto"}, 0) {
        @Override
        public boolean isCellEditable(int row, int column) {
            return column == 2; // Solo la columna del botón es editable
        }
    };

    try (Connection conn = ConexionSQL.conectar()) {
        String query = "SELECT Nombre, Precio FROM producto_snack";
        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();

        while (rs.next()) {
            String nombre = rs.getString("Nombre");
            double precio = rs.getDouble("Precio");
            model.addRow(new Object[]{nombre, precio, "Agregar"});
        }

        tblCompra.setModel(model);
        rs.close();
        stmt.close();

        agregarBotonAccionSnack();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar los snacks: " + e.getMessage());
    }
}


private void agregarBotonAccionSnack() {
    tblCompra.getColumn("Producto").setCellRenderer(new javax.swing.table.DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            JButton btn = new JButton("Agregar");
            return btn;
        }
    });

    tblCompra.getColumn("Producto").setCellEditor(new DefaultCellEditor(new JCheckBox()) {
        private JButton btn = new JButton("Agregar");

        {
        btn.addActionListener(e -> {
            int row = tblCompra.getSelectedRow();
            idFuncionSeleccionado = listaIdFunciones.get(row);
            String nombre = (String) tblCompra.getValueAt(row, 0);
            double precio = (double) tblCompra.getValueAt(row, 1);

            // Agregar snack a la lista
            insertarSnackEnCarrito(nombre, precio);

            listaSnacks.add(nombre);
            txtNombreSnack.setText(String.join(", ", listaSnacks));
            txtCantidadProductos.setText(String.valueOf(listaSnacks.size()));

            // Calcular total de snacks + tiquetes
            totalSnacks += precio;
            int totalBoletos = (int) spnCantidadTiquetes.getValue() * 2500;
            double totalFinal = totalBoletos + totalSnacks;

            txtTotal.setText(String.format("%.2f", totalFinal)); // ✅ aquí va el total
        });

        }

        @Override
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            return btn;
        }
    });
}



private int obtenerIDPeliculaDesdeFuncion(int idFuncion) {
    int idPelicula = -1;

    try (Connection conn = ConexionSQL.conectar()) {
        String query = "SELECT ID_Pelicula FROM Funcion WHERE ID_Funcion = ?";
        PreparedStatement stmt = conn.prepareStatement(query);
        stmt.setInt(1, idFuncion);
        ResultSet rs = stmt.executeQuery();

        if (rs.next()) {
            idPelicula = rs.getInt("ID_Pelicula");
        }

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener el ID de la película: " + e.getMessage());
    }

    return idPelicula;
}


private void insertarSnackEnCarrito(String nombre, double precio) {
    int idCliente = Sesion.idClienteActual;
    int idFuncion = obtenerIdFuncionSeleccionada();  // Ya lo tienes
    int idPelicula = obtenerIDPeliculaDesdeFuncion(idFuncion); // Puedes implementarlo con un SELECT
    int cantidad = 1;
    double total = precio;

      /* try (Connection conn = ConexionSQL.conectar()) {
        // String sql = "INSERT INTO carrito (ID_Cliente, ID_Pelicula, ID_Funcion, cantidad_tiquetes, total, articulo_snack, cantidad_articulos) " +
                     // "VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement stmt = conn.prepareStatement(sql);
        stmt.setInt(1, idCliente);
        stmt.setInt(2, idPelicula);
        stmt.setInt(3, idFuncion);
        stmt.setInt(4, 0); // Asignar 0 si no hay tiquetes por ahora
        stmt.setDouble(5, total);
        stmt.setString(6, nombre);
        stmt.setInt(7, cantidad);

        stmt.executeUpdate();
        JOptionPane.showMessageDialog(this, "Snack agregado al carrito.");
        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al insertar en carrito: " + e.getMessage());
    }
    */
}


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CompraTiquetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CompraTiquetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CompraTiquetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CompraTiquetes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CompraTiquetes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDescuento;
    private javax.swing.JButton btnFacturar;
    private javax.swing.JButton btnRegreso;
    private javax.swing.JButton btnSeleccion;
    private javax.swing.JComboBox<String> cmbFunciones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JSpinner spnCantidadTiquetes;
    private javax.swing.JTable tblCompra;
    private javax.swing.JTable tblfunciones;
    private javax.swing.JTextField txtAsientos;
    private javax.swing.JTextField txtCantidadProductos;
    private javax.swing.JTextField txtCantidadTiquetes;
    private javax.swing.JTextField txtFechaFuncion;
    private javax.swing.JTextField txtNombreSnack;
    private javax.swing.JTextField txtPelicula;
    private javax.swing.JTextField txtTotal;
    // End of variables declaration//GEN-END:variables
}
